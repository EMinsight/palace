diff --git a/CMakeLists.txt b/CMakeLists.txt
index 4e0bb93..3159916 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -27,7 +27,6 @@ enable_testing()
 if(NOT MUMPS_UPSTREAM_VERSION)
   set(MUMPS_UPSTREAM_VERSION 5.7.3)
 endif()
-
 if(MSVC AND BUILD_SHARED_LIBS)
   message(WARNING "MUMPS: Windows IntelLLVM compilers with **shared** libraries is not supported and will probably fail.
   Recommend using static libraries, which does work:
@@ -48,10 +47,7 @@ find_package(Threads)
 
 if(MUMPS_parallel)
   find_package(MPI COMPONENTS C Fortran REQUIRED)
-  if(NOT DEFINED ENV{MKLROOT} AND NOT LAPACK_VENDOR MATCHES "^MKL" OR NOT MUMPS_scalapack)
-    # oneMKL MKLConfig.cmake must be invoked only once
-    include(cmake/lapack.cmake)
-  endif()
+  include(cmake/lapack.cmake)
   set(NUMERIC_LIBS LAPACK::LAPACK)
 
   if(MUMPS_scalapack)
@@ -59,10 +55,6 @@ if(MUMPS_parallel)
     list(PREPEND NUMERIC_LIBS SCALAPACK::SCALAPACK)
   endif()
 
-  # avoid MPICH -fallow flag leakage
-  set(NUMERIC_INC ${MPI_Fortran_INCLUDE_DIRS})
-  list(APPEND NUMERIC_LIBS ${MPI_Fortran_LIBRARIES} MPI::MPI_C)
-
   if(MUMPS_openmp)
     find_package(OpenMP COMPONENTS C Fortran REQUIRED)
     list(APPEND NUMERIC_LIBS OpenMP::OpenMP_Fortran OpenMP::OpenMP_C)
@@ -87,25 +79,13 @@ if(scotch)
   list(APPEND ORDERING_LIBS Scotch::Scotch)
 endif()
 
-if(parmetis)
-  find_package(METIS REQUIRED COMPONENTS ParMETIS)
-  list(APPEND ORDERING_DEFS parmetis metis)
-  list(APPEND ORDERING_LIBS METIS::METIS)
-elseif(metis)
+if(MUMPS_metis)
   find_package(METIS REQUIRED)
-  list(APPEND ORDERING_DEFS metis)
-  list(APPEND ORDERING_LIBS METIS::METIS)
 endif()
 
-list(APPEND ORDERING_LIBS pord)
-
-install(FILES
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindLAPACK.cmake
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindSCALAPACK.cmake
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindMETIS.cmake
-${CMAKE_CURRENT_SOURCE_DIR}/cmake/FindScotch.cmake
-DESTINATION cmake
-)
+if (MUMPS_parmetis)
+  find_package(PARMETIS REQUIRED)
+endif()
 
 message(STATUS "MUMPS ORDERING_DEFS: ${ORDERING_DEFS}")
 message(STATUS "MUMPS ORDERING_LIBS: ${ORDERING_LIBS}")
diff --git a/cmake/FindMETIS.cmake b/cmake/FindMETIS.cmake
index 03eab67..566119c 100644
--- a/cmake/FindMETIS.cmake
+++ b/cmake/FindMETIS.cmake
@@ -1,79 +1,73 @@
-# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying
-# file Copyright.txt or https://cmake.org/licensing for details.
-
-#[=======================================================================[.rst:
-FindMETIS
--------
-Michael Hirsch, Ph.D.
-
-Finds the METIS library.
-NOTE: If libparmetis used, libmetis must also be linked.
-
-Imported Targets
-^^^^^^^^^^^^^^^^
-
-METIS::METIS
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-METIS_LIBRARIES
-  libraries to be linked
-
-METIS_INCLUDE_DIRS
-  dirs to be included
-
-#]=======================================================================]
-
-
-if(ParMETIS IN_LIST METIS_FIND_COMPONENTS)
-  find_library(PARMETIS_LIBRARY
-  NAMES parmetis
-  PATH_SUFFIXES METIS libmetis
-  DOC "ParMETIS library"
-  )
-  if(PARMETIS_LIBRARY)
-    set(METIS_ParMETIS_FOUND true)
-  endif()
+# FindMETIS.cmake
+# Finds the METIS library and sets the following variables:
+#  METIS_FOUND - True if METIS was found
+#  METIS_INCLUDE_DIRS - METIS include directories
+#  METIS_LIBRARIES - METIS libraries
+#  METIS_VERSION - METIS version if found
+
+# Try to find METIS using pkg-config first
+find_package(PkgConfig QUIET)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PC_METIS QUIET metis)
 endif()
 
+# Find the METIS header
+find_path(METIS_INCLUDE_DIR
+  NAMES metis.h
+  PATHS
+    ${PC_METIS_INCLUDE_DIRS}
+    /usr/include
+    /usr/local/include
+    $ENV{METIS_DIR}/include
+  PATH_SUFFIXES metis
+)
+
+# Find the METIS library
 find_library(METIS_LIBRARY
-NAMES metis
-PATH_SUFFIXES METIS libmetis
-DOC "METIS library"
+  NAMES metis
+  PATHS
+    ${PC_METIS_LIBRARY_DIRS}
+    /usr/lib
+    /usr/local/lib
+    $ENV{METIS_DIR}/lib
 )
 
-if(ParMETIS IN_LIST METIS_FIND_COMPONENTS)
-  set(metis_inc parmetis.h)
-else()
-  set(metis_inc metis.h)
-endif()
+# Try to find version information
+if(METIS_INCLUDE_DIR)
+  file(STRINGS "${METIS_INCLUDE_DIR}/metis.h" METIS_VERSION_MAJOR_LINE REGEX "^#define[\t ]+METIS_VER_MAJOR[\t ]+[0-9]+")
+  file(STRINGS "${METIS_INCLUDE_DIR}/metis.h" METIS_VERSION_MINOR_LINE REGEX "^#define[\t ]+METIS_VER_MINOR[\t ]+[0-9]+")
 
-find_path(METIS_INCLUDE_DIR
-NAMES ${metis_inc}
-PATH_SUFFIXES METIS openmpi-x86_64 mpich-x86_64
-DOC "METIS include directory"
-)
+  string(REGEX REPLACE "^#define[\t ]+METIS_VER_MAJOR[\t ]+([0-9]+)" "\\1" METIS_VERSION_MAJOR "${METIS_VERSION_MAJOR_LINE}")
+  string(REGEX REPLACE "^#define[\t ]+METIS_VER_MINOR[\t ]+([0-9]+)" "\\1" METIS_VERSION_MINOR "${METIS_VERSION_MINOR_LINE}")
 
-set(METIS_LIBRARIES ${PARMETIS_LIBRARY} ${METIS_LIBRARY})
+  set(METIS_VERSION "${METIS_VERSION_MAJOR}.${METIS_VERSION_MINOR}")
+endif()
 
+# Handle standard arguments
 include(FindPackageHandleStandardArgs)
 find_package_handle_standard_args(METIS
-REQUIRED_VARS METIS_LIBRARIES METIS_INCLUDE_DIR
-HANDLE_COMPONENTS
+  REQUIRED_VARS
+    METIS_LIBRARY
+    METIS_INCLUDE_DIR
+  VERSION_VAR METIS_VERSION
 )
 
+# Set output variables
 if(METIS_FOUND)
+  set(METIS_LIBRARIES ${METIS_LIBRARY})
   set(METIS_INCLUDE_DIRS ${METIS_INCLUDE_DIR})
 
-  message(VERBOSE "METIS libraries: ${METIS_LIBRARIES}
-  METIS include directories: ${METIS_INCLUDE_DIRS}")
-
-  if(NOT TARGET METIS::METIS)
-    add_library(METIS::METIS INTERFACE IMPORTED)
-    set_property(TARGET METIS::METIS PROPERTY INTERFACE_LINK_LIBRARIES "${METIS_LIBRARIES}")
-    set_property(TARGET METIS::METIS PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${METIS_INCLUDE_DIR}")
+  if(NOT TARGET metis::metis)
+    add_library(metis::metis UNKNOWN IMPORTED)
+    set_target_properties(metis::metis PROPERTIES
+      IMPORTED_LOCATION "${METIS_LIBRARY}"
+      INTERFACE_INCLUDE_DIRECTORIES "${METIS_INCLUDE_DIRS}"
+    )
   endif()
-endif(METIS_FOUND)
+endif()
 
-mark_as_advanced(METIS_INCLUDE_DIR METIS_LIBRARY PARMETIS_LIBRARY)
+# Mark advanced variables
+mark_as_advanced(
+  METIS_INCLUDE_DIR
+  METIS_LIBRARY
+)
diff --git a/cmake/FindPARMETIS.cmake b/cmake/FindPARMETIS.cmake
new file mode 100644
index 0000000..8d680c5
--- /dev/null
+++ b/cmake/FindPARMETIS.cmake
@@ -0,0 +1,82 @@
+# FindPARMETIS.cmake
+# Finds the PARMETIS library and sets the following variables:
+#  PARMETIS_FOUND - True if PARMETIS was found
+#  PARMETIS_INCLUDE_DIRS - PARMETIS include directories
+#  PARMETIS_LIBRARIES - PARMETIS libraries
+#  PARMETIS_VERSION - PARMETIS version if found
+
+# Try to find PARMETIS using pkg-config first
+find_package(PkgConfig QUIET)
+if(PKG_CONFIG_FOUND)
+  pkg_check_modules(PC_PARMETIS QUIET parmetis)
+endif()
+
+# Find MPI as PARMETIS requires it
+find_package(MPI REQUIRED)
+
+# Find METIS as PARMETIS requires it
+find_package(METIS REQUIRED)
+
+# Find the PARMETIS header
+find_path(PARMETIS_INCLUDE_DIR
+  NAMES parmetis.h
+  PATHS
+    ${PC_PARMETIS_INCLUDE_DIRS}
+    /usr/include
+    /usr/local/include
+    $ENV{PARMETIS_DIR}/include
+  PATH_SUFFIXES parmetis
+)
+
+# Find the PARMETIS library
+find_library(PARMETIS_LIBRARY
+  NAMES parmetis
+  PATHS
+    ${PC_PARMETIS_LIBRARY_DIRS}
+    /usr/lib
+    /usr/local/lib
+    $ENV{PARMETIS_DIR}/lib
+)
+
+# Try to find version information
+if(PARMETIS_INCLUDE_DIR)
+  file(STRINGS "${PARMETIS_INCLUDE_DIR}/parmetis.h" PARMETIS_VERSION_MAJOR_LINE REGEX "^#define[\t ]+PARMETIS_MAJOR_VERSION[\t ]+[0-9]+")
+  file(STRINGS "${PARMETIS_INCLUDE_DIR}/parmetis.h" PARMETIS_VERSION_MINOR_LINE REGEX "^#define[\t ]+PARMETIS_MINOR_VERSION[\t ]+[0-9]+")
+
+  string(REGEX REPLACE "^#define[\t ]+PARMETIS_MAJOR_VERSION[\t ]+([0-9]+)" "\\1" PARMETIS_VERSION_MAJOR "${PARMETIS_VERSION_MAJOR_LINE}")
+  string(REGEX REPLACE "^#define[\t ]+PARMETIS_MINOR_VERSION[\t ]+([0-9]+)" "\\1" PARMETIS_VERSION_MINOR "${PARMETIS_VERSION_MINOR_LINE}")
+
+  set(PARMETIS_VERSION "${PARMETIS_VERSION_MAJOR}.${PARMETIS_VERSION_MINOR}")
+endif()
+
+# Handle standard arguments
+include(FindPackageHandleStandardArgs)
+find_package_handle_standard_args(PARMETIS
+  REQUIRED_VARS
+    PARMETIS_LIBRARY
+    PARMETIS_INCLUDE_DIR
+    MPI_FOUND
+    METIS_FOUND
+  VERSION_VAR PARMETIS_VERSION
+)
+
+# Set output variables
+if(PARMETIS_FOUND)
+  set(PARMETIS_LIBRARIES ${PARMETIS_LIBRARY} ${METIS_LIBRARIES} ${MPI_LIBRARIES})
+  set(PARMETIS_INCLUDE_DIRS ${PARMETIS_INCLUDE_DIR} ${METIS_INCLUDE_DIRS} ${MPI_INCLUDE_PATH})
+
+  if(NOT TARGET parmetis::parmetis)
+    add_library(parmetis::parmetis UNKNOWN IMPORTED)
+    set_target_properties(parmetis::parmetis PROPERTIES
+      IMPORTED_LOCATION "${PARMETIS_LIBRARY}"
+      INTERFACE_INCLUDE_DIRECTORIES "${PARMETIS_INCLUDE_DIR}"
+      INTERFACE_LINK_LIBRARIES "metis::metis;MPI::MPI_C"
+    )
+  endif()
+endif()
+
+# Mark advanced variables
+mark_as_advanced(
+  PARMETIS_INCLUDE_DIR
+  PARMETIS_LIBRARY
+)
diff --git a/cmake/FindSCALAPACK.cmake b/cmake/FindSCALAPACK.cmake
index d1880b7..d2ea331 100644
--- a/cmake/FindSCALAPACK.cmake
+++ b/cmake/FindSCALAPACK.cmake
@@ -62,8 +62,6 @@ References
 
 include(CheckSourceCompiles)
 
-set(SCALAPACK_LIBRARY)  # avoids appending to prior FindScalapack
-
 #===== functions
 
 function(scalapack_check)
@@ -74,11 +72,8 @@ find_package(Threads)
 
 set(CMAKE_REQUIRED_FLAGS)
 set(CMAKE_REQUIRED_LINK_OPTIONS)
-set(CMAKE_REQUIRED_INCLUDES ${SCALAPACK_INCLUDE_DIR} ${LAPACK_INCLUDE_DIRS} ${MPI_Fortran_INCLUDE_DIRS})
-set(CMAKE_REQUIRED_LIBRARIES ${SCALAPACK_LIBRARY})
-if(BLACS_LIBRARY)
-  list(APPEND CMAKE_REQUIRED_LIBRARIES ${BLACS_LIBRARY})
-endif()
+set(CMAKE_REQUIRED_INCLUDES ${SCALAPACK_INCLUDE_DIRS} ${LAPACK_INCLUDE_DIRS} ${MPI_Fortran_INCLUDE_DIRS})
+set(CMAKE_REQUIRED_LIBRARIES ${SCALAPACK_LIBRARIES})
 list(APPEND CMAKE_REQUIRED_LIBRARIES ${LAPACK_LIBRARIES} ${MPI_Fortran_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
 
 if(STATIC IN_LIST SCALAPACK_FIND_COMPONENTS AND
@@ -285,20 +280,13 @@ endif()
 
 if(SCALAPACK_FOUND)
   # need if _FOUND guard as can't overwrite imported target even if bad
-  set(SCALAPACK_LIBRARIES ${SCALAPACK_LIBRARY})
-  if(BLACS_LIBRARY)
-    list(APPEND SCALAPACK_LIBRARIES ${BLACS_LIBRARY})
-  endif()
-
-  set(SCALAPACK_INCLUDE_DIRS ${SCALAPACK_INCLUDE_DIR})
-
   message(VERBOSE "Scalapack libraries: ${SCALAPACK_LIBRARIES}
 Scalapack include directories: ${SCALAPACK_INCLUDE_DIRS}")
 
   if(NOT TARGET SCALAPACK::SCALAPACK)
     add_library(SCALAPACK::SCALAPACK INTERFACE IMPORTED)
     set_property(TARGET SCALAPACK::SCALAPACK PROPERTY INTERFACE_LINK_LIBRARIES "${SCALAPACK_LIBRARIES}")
-    set_property(TARGET SCALAPACK::SCALAPACK PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${SCALAPACK_INCLUDE_DIR}")
+    set_property(TARGET SCALAPACK::SCALAPACK PROPERTY INTERFACE_INCLUDE_DIRECTORIES "${SCALAPACK_INCLUDE_DIRS}")
 
     # For MKL, we don't use FindLapack, so define LAPACK::LAPACK as alias
     if(MKL_FOUND AND NOT TARGET LAPACK::LAPACK)
@@ -306,5 +294,3 @@ Scalapack include directories: ${SCALAPACK_INCLUDE_DIRS}")
     endif()
   endif()
 endif()
-
-mark_as_advanced(SCALAPACK_LIBRARY SCALAPACK_INCLUDE_DIR)
diff --git a/cmake/lapack.cmake b/cmake/lapack.cmake
index 3f0997e..6776359 100644
--- a/cmake/lapack.cmake
+++ b/cmake/lapack.cmake
@@ -1,11 +1,2 @@
 # Handle options for finding LAPACK
-
-if(NOT DEFINED LAPACK_VENDOR AND DEFINED ENV{MKLROOT} AND IS_DIRECTORY "$ENV{MKLROOT}")
-  set(LAPACK_VENDOR MKL)
-endif()
-
-if(find_static)
-  list(APPEND LAPACK_VENDOR STATIC)
-endif()
-
-find_package(LAPACK REQUIRED COMPONENTS ${LAPACK_VENDOR})
+find_package(LAPACK REQUIRED)
diff --git a/cmake/scalapack.cmake b/cmake/scalapack.cmake
index 8727508..3762473 100644
--- a/cmake/scalapack.cmake
+++ b/cmake/scalapack.cmake
@@ -1,103 +1 @@
-include(ExternalProject)
-include(GNUInstallDirs)
-
-if(find AND NOT TARGET SCALAPACK::SCALAPACK)
-
-# Make SCALAPACK_VENDOR match LAPACK_VENDOR
-
-if(NOT DEFINED SCALAPACK_VENDOR)
-  if(LAPACK_VENDOR MATCHES "^MKL")
-    set(SCALAPACK_VENDOR MKL)
-  elseif(NOT DEFINED LAPACK_VENDOR AND
-    (DEFINED ENV{MKLROOT} AND IS_DIRECTORY "$ENV{MKLROOT}"))
-    set(SCALAPACK_VENDOR MKL)
-    set(LAPACK_VENDOR MKL)
-  endif()
-
-  if(LAPACK_VENDOR STREQUAL "AOCL")
-    set(SCALAPACK_VENDOR AOCL)
-  endif()
-endif()
-
-if(MKL IN_LIST SCALAPACK_VENDOR)
-  if(MUMPS_openmp)
-    list(APPEND SCALAPACK_VENDOR OpenMP)
-  endif()
-endif()
-
-if(MKL IN_LIST SCALAPACK_VENDOR AND NOT MKL64 IN_LIST SCALAPACK_VENDOR)
-  if(intsize64)
-    list(APPEND SCALAPACK_VENDOR MKL64)
-  endif()
-endif()
-
-if(find_static)
-  list(APPEND SCALAPACK_VENDOR STATIC)
-endif()
-
-find_package(SCALAPACK COMPONENTS ${SCALAPACK_VENDOR})
-
-endif()
-
-if(SCALAPACK_FOUND OR TARGET SCALAPACK::SCALAPACK)
-  return()
-elseif(DEFINED SCALAPACK_VENDOR)
-  message(FATAL_ERROR "Scalapack from ${SCALAPACK_VENDOR} not found.")
-endif()
-
-set(scalapack_cmake_args
--DBUILD_SINGLE:BOOL=${BUILD_SINGLE}
--DBUILD_DOUBLE:BOOL=${BUILD_DOUBLE}
--DBUILD_COMPLEX:BOOL=${BUILD_COMPLEX}
--DBUILD_COMPLEX16:BOOL=${BUILD_COMPLEX16}
--DBUILD_SHARED_LIBS:BOOL=${BUILD_SHARED_LIBS}
--DCMAKE_INSTALL_PREFIX:PATH=${CMAKE_INSTALL_PREFIX}
--DCMAKE_C_COMPILER:PATH=${CMAKE_C_COMPILER}
--DCMAKE_Fortran_COMPILER:PATH=${CMAKE_Fortran_COMPILER}
--DBUILD_TESTING:BOOL=off
--DCMAKE_BUILD_TYPE:STRING=Release
-)
-
-file(READ ${CMAKE_CURRENT_LIST_DIR}/libraries.json json)
-
-string(JSON scalapack_url GET ${json} scalapack git)
-string(JSON scalapack_tag GET ${json} scalapack tag)
-
-set(SCALAPACK_INCLUDE_DIRS ${CMAKE_INSTALL_FULL_INCLUDEDIR})
-file(MAKE_DIRECTORY ${SCALAPACK_INCLUDE_DIRS})
-if(NOT IS_DIRECTORY ${SCALAPACK_INCLUDE_DIRS})
-  message(FATAL_ERROR "Could not create directory: ${SCALAPACK_INCLUDE_DIRS}")
-endif()
-
-if(BUILD_SHARED_LIBS)
-  set(SCALAPACK_LIBRARIES ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}scalapack${CMAKE_SHARED_LIBRARY_SUFFIX}
-    ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}blacs${CMAKE_SHARED_LIBRARY_SUFFIX}
-  )
-else()
-  set(SCALAPACK_LIBRARIES ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}scalapack${CMAKE_STATIC_LIBRARY_SUFFIX}
-    ${CMAKE_INSTALL_FULL_LIBDIR}/${CMAKE_STATIC_LIBRARY_PREFIX}blacs${CMAKE_STATIC_LIBRARY_SUFFIX}
-  )
-endif()
-
-ExternalProject_Add(scalapack
-GIT_REPOSITORY ${scalapack_url}
-GIT_TAG ${scalapack_tag}
-GIT_SHALLOW true
-CMAKE_ARGS ${scalapack_cmake_args}
-TEST_COMMAND ""
-BUILD_BYPRODUCTS ${SCALAPACK_LIBRARIES}
-CONFIGURE_HANDLED_BY_BUILD true
-USES_TERMINAL_DOWNLOAD true
-USES_TERMINAL_UPDATE true
-USES_TERMINAL_PATCH true
-USES_TERMINAL_CONFIGURE true
-USES_TERMINAL_BUILD true
-USES_TERMINAL_INSTALL true
-USES_TERMINAL_TEST true
-)
-
-add_library(SCALAPACK::SCALAPACK INTERFACE IMPORTED GLOBAL)
-target_include_directories(SCALAPACK::SCALAPACK INTERFACE ${SCALAPACK_INCLUDE_DIRS})
-target_link_libraries(SCALAPACK::SCALAPACK INTERFACE ${SCALAPACK_LIBRARIES})
-
-add_dependencies(SCALAPACK::SCALAPACK scalapack)
+find_package(SCALAPACK)
\ No newline at end of file
